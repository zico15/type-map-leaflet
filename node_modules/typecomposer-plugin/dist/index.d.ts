import { Plugin } from 'vite';

interface PWAManifest {
    name: string;
    short_name: string;
    description: string;
    start_url: string;
    display: "fullscreen" | "standalone" | "minimal-ui" | "browser" | "minimal-ui";
    background_color: string;
    theme_color: string;
    icons: PWAIcon[];
    categories?: string[];
    orientation?: "any" | "natural" | "landscape" | "portrait" | "portrait-primary" | "portrait-secondary" | "landscape-primary" | "landscape-secondary";
    prefer_related_applications?: boolean;
    related_applications?: PWARelatedApplication[];
    scope?: string;
    screenshots?: PWAScreenshot[];
    serviceworker?: {
        src: string;
        scope: string;
    };
    shortcuts?: PWAShortcut[];
    display_override?: ("fullscreen" | "standalone" | "minimal-ui" | "browser" | "minimal-ui")[];
    file_handlers?: PWAFileHandler[];
    protocol_handlers?: PWAProtocolHandler[];
    share_target?: PWAShareTarget;
}
interface PWAIcon {
    src: string;
    sizes: string;
    type: string;
}
interface PWARelatedApplication {
    platform: string;
    id: string;
}
interface PWAScreenshot {
    src: string;
    sizes: string;
    type: string;
}
interface PWAShortcut {
    name: string;
    url: string;
    icons: PWAIcon[];
}
interface PWAFileHandler {
    action: string;
    accept: {
        [key: string]: string[];
    };
}
interface PWAProtocolHandler {
    protocol: string;
    url: string;
}
interface PWAShareTarget {
    action: string;
    method: string;
    params: {
        [key: string]: string;
    };
}

interface PWDOptions {
    manifest?: PWAManifest | "auto";
    ignoreFiles?: string[];
}

interface TypeComposerOptions {
    pwa?: PWDOptions;
    debuger?: boolean;
}
declare function TypeComposer(options?: TypeComposerOptions): Plugin<any>[];

export { type TypeComposerOptions, TypeComposer as default };
