import { ref, StyleOptional, CSSStyleDeclarationRef as CSSStyleDeclarationRefType } from "../";
declare global {
    var CSSStyleDeclarationRef: {
        prototype: CSSStyleDeclaration;
        new (): CSSStyleDeclarationRefType;
    };
    interface Array<T> {
        clear(): void;
    }
    interface Event {
        detail: any;
    }
    function scoped(target: any): any;
    interface Window {
        getTheme(): string;
        setTheme(theme: string): void;
    }
    interface Element {
        innerHTML: string | ref<string>;
        style: CSSStyleDeclarationRefType;
        onInit(): void;
        unmount(): void;
        addClasName(...names: string[]): void;
        setStyle(styles: StyleOptional): void;
        onConnected(): void;
        onDisconnected(): void;
    }
    interface HTMLElement {
        innerHTML: string | ref<string>;
        style: CSSStyleDeclarationRefType;
        onInit(): void;
        unmount(): void;
        addClasName(...names: string[]): void;
        setStyle(styles: StyleOptional): void;
        onConnected(): void;
        onDisconnected(): void;
    }
    interface HTMLButtonElement {
        type: "submit" | "reset" | "button" | "file";
        accept: string;
        multiple: boolean;
        onfile: (file: FileList) => void;
    }
    interface WeakRef<T> {
        equals<K extends WeakKey>(value: WeakRef<K>): boolean;
    }
}
export {};
