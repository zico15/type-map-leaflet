import { createProxyRef } from "./RefProxyHandler";
export function ref(target) {
    const _id = Math.random().toString(36).substr(2, 9);
    const registry = new FinalizationRegistry((target) => {
        _subscribers = _subscribers.filter((subscriber) => subscriber.target != target);
        console.log("FinalizationRegistry: ", target);
    });
    let _subscribers = [];
    const newTarget = {
        value: target,
        id: _id,
        subscriber,
        unsubscribe,
        onChange,
        toString,
    };
    const proxy = initRef();
    function initRef() {
        const result = createProxy(newTarget);
        if (typeof newTarget.value === "object") {
            newTarget.value = createProxy(newTarget.value);
            checkType(newTarget.value);
        }
        else
            result["refPropertyKey"] = "value";
        return result;
    }
    function checkType(value) {
        for (let property in value) {
            const descriptor = Object.getOwnPropertyDescriptor(value, property);
            if (descriptor && descriptor.writable && typeof value[property] === "object") {
                value[property] = createProxy(value[property]);
            }
        }
    }
    function createProxy(target) {
        // console.log("createProxy: ", target, Object.keys(target));
        return createProxyRef(target, notify, onChange);
    }
    function notify() {
        const remove = [];
        _subscribers.forEach((subscriber) => {
            if (!setValueToSubscriber(subscriber))
                remove.push(subscriber);
        });
        _subscribers = _subscribers.filter((subscriber) => !remove.includes(subscriber));
    }
    function setValueToSubscriber(subscriber) {
        let result = true;
        try {
            const target = subscriber.target?.deref();
            if (target) {
                if (subscriber.fun) {
                    const fun = subscriber.fun?.deref();
                    if (fun)
                        fun(newTarget.value);
                    else
                        result = false;
                }
            }
            else
                result = false;
        }
        catch (error) {
            result = false;
        }
        if (!result) {
            console.log("FinalizationRegistry2: ", subscriber.target);
            registry.unregister(subscriber.target);
            _subscribers = _subscribers.filter((item) => item != subscriber);
        }
        return result;
    }
    function subscriber(target, propertyKey) {
        // const item = { target: new WeakRef(target), propertyKey };
        // if (setValueToSubscriber(item)) {
        //   _subscribers.push(item);
        //   registry.register(item.target, item);
        // }
    }
    function unsubscribe(data) {
        // _subscribers = _subscribers.filter(
        //   (subscriber) => subscriber != data,
        // );
    }
    function onChange(fun, target) {
        const data = new WeakRef(fun);
        const item = {
            target: target ? new WeakRef(target) : data,
            propertyKey: undefined,
            refPropertyKey: undefined,
            fun: data,
        };
        if (setValueToSubscriber(item) || fun) {
            _subscribers.push(item);
            registry.register(item.target, item);
        }
    }
    function toString() {
        return newTarget.value?.toString() || "";
    }
    return proxy;
}
//# sourceMappingURL=Ref.js.map