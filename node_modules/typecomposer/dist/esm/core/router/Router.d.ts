import { IComponent, RouteView } from "..";
import { RouterGuard } from "./RouterGuard";
type Component = new () => IComponent;
export interface RoutePage {
    path: string;
    component?: Component;
    children?: RoutePage[];
    redirect?: string;
    guard?: RouterGuard;
}
interface RoutePageBuild extends RoutePage {
    parent: RoutePageBuild;
    build: IComponent;
    routeView: RouteView | undefined;
    id?: string;
}
declare class RouterController {
    private _route;
    routePages: RoutePageBuild[];
    private currentRoute;
    private previousRoute;
    private static _props;
    private urlLast;
    constructor();
    doRoutesMatch(route1: string, route2: string): boolean;
    findCorrectRoute(pathname: string, routes?: RoutePage[]): string;
    private buildRoute;
    private buildPages;
    private updateRoute;
    getProps(routePage: RoutePageBuild): any;
    get route(): Router | undefined;
    set route(value: Router | undefined);
    get props(): any;
    set props(value: any);
    addHistory(pathname: string): void;
    getRouteViewFree(routeView: RouteView): RoutePageBuild | undefined;
    getView(routeView: RoutePageBuild): IComponent | undefined;
    private pageNotFound;
    private setView;
    private extractParametersURL;
}
export declare class Router {
    routes: RoutePage[];
    history: "hash" | "history";
    pageNotFound: Component;
    static controller: RouterController;
    private static _props;
    constructor(routes?: RoutePage[], history?: "hash" | "history", pageNotFound?: Component);
    beforeEach(callback: (to: RoutePage) => void): void;
    static get props(): any;
    static create(data: {
        routes: RoutePage[];
        history?: "hash" | "history";
        pageNotFound?: Component;
    }): void;
    private static buildURL;
    private static createAutoId;
    static go(pathname: string, props?: {}): Promise<void>;
}
export {};
