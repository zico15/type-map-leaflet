import { DivElement, GridElement, ILayout } from "../..";
export class BorderPaneElement extends ILayout {
    _top = new DivElement();
    _left = new DivElement();
    _center = new GridElement();
    _centerPane = new DivElement();
    _right = new DivElement();
    _bottom = new DivElement();
    _variant;
    constructor(optional) {
        super(optional);
        this.variant = optional?.variant || "primary";
        this.addClasName("border-pane");
    }
    get variant() {
        return this._variant;
    }
    set variant(variant) {
        this._variant = variant;
        if (this._center == undefined)
            return;
        if (variant == "primary") {
            this.style.gridTemplateRows = "auto 1fr auto";
            this.style.gridTemplateColumns = "auto";
            this._center.style.gridTemplateColumns = "auto 1fr auto";
            this._center.style.gridTemplateRows = "auto";
            this.innerHTML = "";
            super.append(this.top, this._center, this.bottom);
            this._center.innerHTML = "";
            this._center.append(this.left, this._centerPane, this.right);
        }
        else {
            this.style.gridTemplateRows = "auto";
            this.style.gridTemplateColumns = "auto 1fr auto";
            this._center.style.gridTemplateRows = "auto 1fr auto";
            this._center.style.gridTemplateColumns = "auto";
            this.innerHTML = "";
            super.append(this.left, this._center, this.right);
            this._center.innerHTML = "";
            this._center.append(this.top, this._centerPane, this.bottom);
        }
    }
    get top() {
        return this._top;
    }
    get left() {
        return this._left;
    }
    get center() {
        return this._centerPane;
    }
    get containerCenter() {
        return this._center;
    }
    get right() {
        return this._right;
    }
    get bottom() {
        return this._bottom;
    }
    set top(component) {
        this._top?.remove();
        this._top = component;
        if (this.variant == "primary") {
            this.innerHTML = "";
            super.append(this.top, this._center, this.bottom);
        }
        else {
            this._center.innerHTML = "";
            this._center.append(this.top, this._centerPane, this.bottom);
        }
    }
    set left(component) {
        this._left?.remove();
        this._left = component;
        if (this.variant == "primary") {
            this._center.innerHTML = "";
            this._center.append(this.left, this._centerPane, this.right);
        }
        else {
            this.innerHTML = "";
            this.append(this.left, this._center, this.right);
        }
    }
    set center(component) {
        this._centerPane?.remove();
        this._centerPane = component;
        this._center.innerHTML = "";
        if (this.variant == "primary")
            this._center.append(this.left, this._centerPane, this.right);
        else
            this._center.append(this.top, this._centerPane, this.bottom);
    }
    set right(component) {
        this._right?.remove();
        this._right = component;
        if (this.variant == "primary") {
            this._center.innerHTML = "";
            this._center.append(this.left, this._centerPane, this.right);
        }
        else {
            this.innerHTML = "";
            this.append(this.left, this._center, this.right);
        }
    }
    set bottom(component) {
        this._bottom?.remove();
        this._bottom = component;
        if (this.variant == "primary") {
            this.innerHTML = "";
            super.append(this.top, this._center, this.bottom);
        }
        else {
            this._center.innerHTML = "";
            this._center.append(this.top, this._centerPane, this.bottom);
        }
    }
}
customElements.define("border-pane", BorderPaneElement);
//# sourceMappingURL=BorderPaneElement.js.map