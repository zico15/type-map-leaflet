import { Component, UListElement, ListItemElement } from "../..";
export class ListElement extends Component {
    itemSelected = null;
    _container = new UListElement();
    constructor(optional) {
        super({ height: "100vh", ...optional });
        super.append(this.container);
    }
    get container() {
        return this._container;
    }
    appendChild(node) {
        if (node instanceof HTMLCollection) {
            for (let i = 0; i < node.length; i++) {
                const item = node.item(i);
                if (item != undefined && item instanceof HTMLElement)
                    this.addItem(item);
            }
        }
        else if (node instanceof HTMLElement && node && !node.classList.contains("flow-pane-item"))
            this.addItem(node);
        return node;
    }
    removeChild(child) {
        if (child instanceof HTMLElement)
            this.removeItem(child);
        return child;
    }
    addItem(element) {
        const item = element instanceof ListItemElement ? element : new ListItemElement();
        item.classList.add("list-element-item");
        if (!(element instanceof ListItemElement)) {
            if (element instanceof HTMLElement)
                item.appendChild(element);
            else
                item.innerHTML = element;
        }
        this.addItemEventListener(item, element);
        this.container.appendChild(item);
        return item;
    }
    addItemEventListener(parent, child) {
        parent.addEventListener("click", () => {
            if (this.itemSelected != null) {
                this.onUnselectItem(this.itemSelected.child);
                this.itemSelected.parent.classList.remove("list-element-item-selected");
            }
            if (this.itemSelected?.parent != parent) {
                parent.classList.add("list-element-item-selected");
                this.onSelectItem(child);
                if (parent instanceof ListItemElement)
                    parent.onSelect();
                this.itemSelected = { parent, child };
            }
            else
                this.itemSelected = null;
        });
    }
    removeItem(element) {
        for (let i = 0; i < this.children.length; i++) {
            const child = this.children.item(i);
            if (child instanceof HTMLElement) {
                if (typeof element == "string" && child.innerHTML == element)
                    this.container.removeChild(child);
                else if (child == element)
                    this.container.removeChild(child);
                break;
            }
        }
    }
    removeItems() {
        this.container.innerHTML = "";
    }
    append(...nodes) {
        this.container.append(...nodes);
    }
    onSelectItem = () => { };
    onUnselectItem = () => { };
}
customElements.define("list-element", ListElement);
//# sourceMappingURL=ListElement.js.map