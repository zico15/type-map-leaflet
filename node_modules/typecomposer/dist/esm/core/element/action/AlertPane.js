import { Component, DivElement, SpanElement } from "../..";
export class AlertPane extends Component {
    static _div = new DivElement({ id: "alert-system" });
    constructor(options) {
        super({
            className: "alert",
            display: "flex",
            flexDirection: "column",
            ...options,
        });
        const divBtn = this.appendChild(new DivElement({ className: "close-btn" }));
        this.append(new SpanElement({ text: options?.title || "", className: "fas fa-exclamation-circle " + options?.type }));
        this.append(new SpanElement({ text: options?.message || "", className: "msg " + options?.type }));
        const btn = divBtn.appendChild(new SpanElement({ className: "fas fa-times", text: "X" }));
        btn.onclick = () => this.remove();
        const divAlert = document.querySelector("#alert-system");
        if (!divAlert)
            document.body.appendChild(AlertPane._div);
        const timeout = options?.timeout || 5000;
        if (timeout > 0) {
            setTimeout(() => {
                this.remove();
            }, timeout);
        }
    }
    static success(title, message, options) {
        return AlertPane._div.appendChild(new AlertPane({ ...options, type: "success", message, title }));
    }
    static info(title, message, options) {
        return AlertPane._div.appendChild(new AlertPane({ ...options, type: "info", message, title }));
    }
    static warning(title, message, options) {
        return AlertPane._div.appendChild(new AlertPane({ ...options, type: "warning", message, title }));
    }
    static danger(title, message, options) {
        return AlertPane._div.appendChild(new AlertPane({ ...options, type: "danger", message, title }));
    }
}
customElements.define("alert-pane", AlertPane);
//# sourceMappingURL=AlertPane.js.map