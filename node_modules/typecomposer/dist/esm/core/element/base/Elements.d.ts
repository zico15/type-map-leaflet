import { ref, CSSStyleDeclarationRef, StyleOptional, Variant } from "../..";
import { EventHandler } from "./Event";
export interface IElement {
    onInit(): void;
    append(...childs: any[]): void;
    addClasName(...names: string[]): void;
    get style(): StyleOptional;
}
export interface IComponent extends HTMLElement {
    onInit(): void;
    unmount(): void;
    addClasName(...names: string[]): void;
    get style(): CSSStyleDeclarationRef;
    set innerHTML(value: string | ref<string> | any);
}
export declare class Component extends HTMLElement implements IComponent {
    constructor(optional?: StyleOptional);
    static applyData<T extends HTMLElement>(data: StyleOptional | undefined, element: T): void;
    private static applyStyleOrAttribute;
    static setVariant(element: HTMLElement, variant: Variant | undefined): void;
    onEvent(type: string, listener: EventHandler, options?: boolean | AddEventListenerOptions | undefined): void;
    createEvent(type: string, ...data: any[]): boolean;
    removeEvent(type: string): void;
    /**
     * Remove all events from the component
     **/
    removeEvents(): void;
    emitEvent(type: string, ...params: any[]): boolean;
    deleteEvent(type: string): void;
}
export declare class DivElement extends HTMLDivElement implements IComponent {
    constructor(optional?: StyleOptional);
}
export declare class ParagraphElement extends HTMLParagraphElement implements IComponent {
    constructor(optional?: StyleOptional);
}
export interface DataAnchorElement extends StyleOptional {
    href?: string;
    rlink?: string;
    target?: string;
}
export declare class AnchorElement extends HTMLAnchorElement implements IComponent {
    private _rlink;
    constructor(optional?: StyleOptional & {
        download?: string;
        href?: string;
        hreflang?: string;
        media?: string;
        ping?: string;
        referrerpolicy?: "no-referrer" | "no-referrer-when-downgrade" | "origin" | "origin-when-cross-origin" | "same-origin" | "strict-origin" | "strict-origin-when-cross-origin" | "unsafe-url";
        rel?: "alternate" | "author" | "bookmark" | "external" | "help" | "license" | "next" | "nofollow" | "noopener" | "noreferrer" | "opener" | "prev" | "search" | "tag";
        target?: "_blank" | "_self" | "_parent" | "_top";
        type?: string;
        rlink?: string;
    });
    set rlink(link: string);
    get rlink(): string;
}
export declare class AbbreviationElement extends HTMLElement implements IComponent {
    constructor(optional?: StyleOptional & {
        title?: string;
    });
}
export declare class AreaElement extends HTMLAreaElement implements IComponent {
    constructor(optional?: StyleOptional & {
        alt?: string;
        coords?: string;
        download?: string;
        href?: string;
        hreflang?: string;
        media?: string;
        ping?: string;
        referrerpolicy?: "no-referrer" | "no-referrer-when-downgrade" | "origin" | "origin-when-cross-origin" | "same-origin" | "strict-origin" | "strict-origin-when-cross-origin" | "unsafe-url";
        rel?: "alternate" | "author" | "bookmark" | "external" | "help" | "license" | "next" | "nofollow" | "noopener" | "noreferrer" | "opener" | "prev" | "search" | "tag";
        shape?: "circle" | "default" | "poly" | "rect";
        target?: "_blank" | "_self" | "_parent" | "_top";
        type?: string;
    });
}
export interface DataImageElement extends StyleOptional {
    src?: string;
    alt?: string;
}
export declare class ImageElement extends HTMLImageElement implements IComponent {
    constructor(optional?: DataImageElement);
}
export declare class UListElement extends HTMLUListElement implements IComponent {
    constructor(optional?: StyleOptional);
}
export declare class OrderedListElement extends HTMLOListElement implements IComponent {
    constructor(optional?: StyleOptional);
}
export declare class ListItemElement extends HTMLLIElement implements IComponent {
    constructor(optional?: StyleOptional);
    onSelect(): void;
}
export declare class MainElement extends HTMLElement implements IComponent {
    constructor(optional?: StyleOptional);
}
export declare class SpanElement extends HTMLSpanElement implements IComponent {
    constructor(optional?: StyleOptional);
}
export declare class StrongElement extends HTMLSpanElement implements IComponent {
    constructor(optional?: StyleOptional);
}
export declare class EmElement extends HTMLEmbedElement implements IComponent {
    constructor(optional?: StyleOptional);
}
export declare class BreakElement extends HTMLBRElement implements IComponent {
    constructor(optional?: StyleOptional);
}
export declare class TableHeadElement extends HTMLTableSectionElement implements IComponent {
    constructor(optional?: StyleOptional);
}
export declare class TableBodyElement extends HTMLTableSectionElement implements IComponent {
    constructor(optional?: StyleOptional);
}
export declare class TableHeadCellElement extends HTMLTableCellElement {
    constructor(optional?: StyleOptional & {
        colspan?: number;
        rowspan?: number;
        child?: HTMLElement;
    });
}
export declare class TableFootElement extends HTMLTableSectionElement implements IComponent {
    constructor(optional?: StyleOptional);
}
export declare class TableElement extends HTMLTableElement implements IComponent {
    private _head;
    private _body;
    private _foot;
    constructor(optional?: StyleOptional);
    addHeadRows(...rows: TableRowElement[]): void;
    addHeadRow(row: TableRowElement): TableRowElement;
    removeHeadRow(row: number | TableRowElement): void;
    removeHeadRows(): void;
    addFootRows(...rows: TableRowElement[]): void;
    addFootRow(row: TableRowElement): TableRowElement;
    removeFootRow(row: number | TableRowElement): void;
    removeFootRows(): void;
    addRows(...rows: TableRowElement[]): void;
    addRow(row: TableRowElement): TableRowElement;
    removeRow(row: number | TableRowElement): void;
    removeRows(): void;
}
export declare class TableFootRowElement extends HTMLTableRowElement {
    constructor(optional?: StyleOptional & {
        cells?: TableCellElement[];
    });
    addCells(...cells: TableCellElement[]): void;
    addCell(cell: TableCellElement): TableCellElement;
}
export declare class TableHeadRowElement extends HTMLTableRowElement {
    constructor(optional?: StyleOptional & {
        cells?: TableCellElement[];
    });
    addCells(...cells: TableCellElement[]): void;
    addCell(cell: TableCellElement): TableCellElement;
}
export declare class TableRowElement extends HTMLTableRowElement implements IComponent {
    constructor(optional?: StyleOptional & {
        cells?: TableCellElement[];
    });
    addCells(...cells: any[]): void;
    addCell(cell: any): any;
}
export declare class TableCellElement extends HTMLTableCellElement implements IComponent {
    constructor(optional?: StyleOptional & {
        colspan?: number;
        rowspan?: number;
        child?: HTMLElement;
    });
}
export declare class PreElement extends HTMLPreElement implements IComponent {
    constructor(optional?: StyleOptional);
}
export type InputType = "text" | "password" | "checkbox" | "radio" | "submit" | "reset" | "file" | "hidden" | "image" | "button" | "color" | "date" | "datetime-local" | "email" | "month" | "number" | "range" | "search" | "tel" | "time" | "url" | "week";
export declare class InputElement extends HTMLInputElement implements IComponent {
    constructor(optional?: StyleOptional & {
        id?: string;
        type?: InputType;
        name?: string;
        value?: string | ref<string>;
        placeholder?: string;
    });
}
export declare class ButtonElement extends HTMLButtonElement implements IComponent {
    constructor(optional?: StyleOptional & {
        autofocus?: boolean;
        disabled?: boolean;
        form?: string;
        formaction?: string;
        formenctype?: string;
        formmethod?: string;
        formnovalidate?: boolean;
        formtarget?: string;
        popovertarget?: string;
        popovertargetaction?: "hide" | "show" | "toggle";
        name?: string;
        type?: "button" | "reset" | "submit" | "file";
        value?: string;
        accept?: string;
        multiple?: boolean;
        onclick?: (event: MouseEvent) => void;
        onfile?: (fileList: FileList) => void;
    });
    set type(value: "submit" | "reset" | "button" | "file");
}
export declare class TextAreaElement extends HTMLTextAreaElement implements IComponent {
    constructor(optional?: StyleOptional);
}
export declare class LabelElement extends HTMLLabelElement implements IComponent {
    constructor(optional?: StyleOptional & {
        for?: string;
        text?: string;
    });
}
export declare class SelectElement extends HTMLSelectElement implements IComponent {
    constructor(optional?: StyleOptional);
}
export declare class AudioElement extends HTMLAudioElement implements IComponent {
    constructor(optional?: StyleOptional & {
        autoplay?: boolean;
        controls?: boolean;
        loop?: boolean;
        muted?: boolean;
        preload?: "auto" | "metadata" | "none";
        src?: string;
    });
}
export declare class BoldElement extends HTMLElement implements IComponent {
    constructor(optional?: StyleOptional);
}
export declare class BaseElement extends HTMLElement implements IComponent {
    constructor(optional?: StyleOptional & {
        href?: string;
        target?: "_blank" | "_self" | "_parent" | "_top";
    });
}
export declare class BodyElement extends HTMLBodyElement implements IComponent {
    constructor(optional?: StyleOptional);
}
export declare class VideoElement extends HTMLVideoElement implements IComponent {
    constructor(optional?: StyleOptional);
}
export declare class CanvasElement extends HTMLCanvasElement implements IComponent {
    constructor(optional?: StyleOptional & {
        width?: number;
        height?: number;
    });
}
export declare class CaptionElement extends HTMLTableCaptionElement implements IComponent {
    constructor(optional?: StyleOptional);
}
export declare class CiteElement extends HTMLElement implements IComponent {
    constructor(optional?: StyleOptional);
}
export declare class CodeElement extends HTMLElement implements IComponent {
    constructor(optional?: StyleOptional & {
        contentEditable?: boolean;
    });
}
export declare class TableColElement extends HTMLTableColElement implements IComponent {
    constructor(optional?: StyleOptional & {
        span?: number;
    });
}
export declare class TableColGroupElement extends HTMLTableColElement implements IComponent {
    constructor(optional?: StyleOptional & {
        span?: number;
    });
}
export declare class DataListElement extends HTMLDataListElement implements IComponent {
    constructor(optional?: StyleOptional);
}
export declare class DefinitionDescriptionElement extends HTMLElement implements IComponent {
    constructor(optional?: StyleOptional);
}
export declare class DeletedTextElement extends HTMLModElement implements IComponent {
    constructor(optional?: StyleOptional & {
        cite?: string;
    });
}
export declare class DetailsElement extends HTMLDetailsElement implements IComponent {
    constructor(optional?: StyleOptional & {
        open?: boolean;
        summary?: string | SummaryElement;
    });
    setSummary(summary: SummaryElement): void;
}
export declare class DefinitionElement extends HTMLElement implements IComponent {
    constructor(optional?: StyleOptional);
}
export declare class DialogElement extends HTMLDialogElement implements IComponent {
    constructor(optional?: StyleOptional & {
        open?: boolean;
    });
}
export declare class EmbedElement extends HTMLEmbedElement implements IComponent {
    constructor(optional?: StyleOptional & {
        height?: number;
        src?: string;
        type?: string;
        width?: number;
    });
}
export declare class FieldSetElement extends HTMLFieldSetElement implements IComponent {
    constructor(optional?: StyleOptional & {
        disabled?: boolean;
        name?: string;
        legend?: string | LegendElement;
    });
    setLegend(legend: LegendElement): void;
}
export declare class FooterElement extends HTMLElement implements IComponent {
    constructor(optional?: StyleOptional);
}
export declare class FormElement extends HTMLFormElement implements IComponent {
    private _response;
    constructor(optional?: StyleOptional & {
        acceptCharset?: string;
        action?: string;
        enctype?: string;
        method?: "get" | "post";
        name?: string;
        novalidate?: boolean;
        rel?: "external" | "help" | "license" | "next" | "nofollow" | "noopener" | "noreferrer" | "opener" | "prev" | "search";
        target?: "_blank" | "_self" | "_parent" | "_top";
    });
}
export declare class H1Element extends HTMLHeadingElement implements IComponent {
    constructor(optional?: StyleOptional);
}
export declare class H2Element extends HTMLHeadingElement implements IComponent {
    constructor(optional?: StyleOptional);
}
export declare class H3Element extends HTMLHeadingElement implements IComponent {
    constructor(optional?: StyleOptional);
    get text(): string;
    set text(value: string | ref<string>);
}
export declare class H4Element extends H3Element implements IComponent {
    constructor(optional?: StyleOptional);
    onInit(): void;
    addClasName(...names: string[]): void;
}
export declare class H5Element extends H3Element implements IComponent {
    constructor(optional?: StyleOptional);
    onInit(): void;
    addClasName(...names: string[]): void;
}
export declare class H6Element extends H3Element implements IComponent {
    constructor(optional?: StyleOptional);
    onInit(): void;
    addClasName(...names: string[]): void;
}
export declare class HeadElement extends HTMLHeadElement implements IComponent {
    constructor(optional?: StyleOptional);
}
export declare class HeaderElement extends HTMLElement implements IComponent {
    constructor(optional?: StyleOptional);
}
export declare class HorizontalRuleElement extends HTMLHRElement implements IComponent {
    constructor(optional?: StyleOptional);
}
export declare class HtmlElement extends HTMLHtmlElement implements IComponent {
    constructor(optional?: StyleOptional & {
        manifest?: string;
    });
    set manifest(value: string);
    get manifest(): string;
}
export declare class IFrameElement extends HTMLIFrameElement implements IComponent {
    constructor(optional?: StyleOptional & {
        allow?: string;
        allowfullscreen?: boolean;
        allowpaymentrequest?: boolean;
        csp?: string;
        height?: number;
        importance?: "auto" | "high" | "low";
        loading?: "eager" | "lazy";
        name?: string;
        referrerpolicy?: "no-referrer" | "no-referrer-when-downgrade" | "origin" | "origin-when-cross-origin" | "same-origin" | "strict-origin" | "strict-origin-when-cross-origin" | "unsafe-url";
        src?: string;
        srcdoc?: string;
        width?: number;
    });
    set allowfullscreen(value: boolean);
    get allowfullscreen(): boolean;
    set allowpaymentrequest(value: boolean);
    get allowpaymentrequest(): boolean;
    set csp(value: string);
    get csp(): string;
    set importance(value: "auto" | "high" | "low");
    get importance(): "auto" | "high" | "low";
    set referrerpolicy(value: "no-referrer" | "no-referrer-when-downgrade" | "origin" | "origin-when-cross-origin" | "same-origin" | "strict-origin" | "strict-origin-when-cross-origin" | "unsafe-url");
    get referrerpolicy(): string;
}
export declare class LegendElement extends HTMLLegendElement implements IComponent {
    constructor(optional?: StyleOptional & {
        value?: number;
    });
}
export declare class SvgElement extends HTMLObjectElement implements IComponent {
    constructor(optional?: StyleOptional & {
        data?: string;
    });
    set color(value: string);
    get color(): string;
}
export declare class NavElement extends HTMLElement implements IComponent {
    constructor(optional?: StyleOptional);
}
export declare class SectionElement extends HTMLElement implements IComponent {
    constructor(optional?: StyleOptional);
}
export declare class ArticleElement extends HTMLElement implements IComponent {
    constructor(optional?: StyleOptional);
}
export declare class SummaryElement extends HTMLElement implements IComponent {
    constructor(optional?: StyleOptional);
}
export declare class ILayout extends Component {
    constructor(optional?: StyleOptional);
}
