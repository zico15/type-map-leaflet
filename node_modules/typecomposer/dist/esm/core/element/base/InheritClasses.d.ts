type GrabConstructorParameters<T> = {
    [K in keyof T]: T[K] extends new (...args: infer P) => any ? P : never;
};
type UnionToIntersection<U> = (U extends any ? (x: U) => void : never) extends (x: infer I) => void ? I : never;
type JoinConstructors<T extends (new (...args: any[]) => any)[]> = new (...args: GrabConstructorParameters<T>) => UnionToIntersection<InstanceType<T[number]>>;
export declare function InheritClasses<T extends (new (...args: any[]) => any)[]>(...bases: T): JoinConstructors<T>;
export {};
