"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventComponent = void 0;
class EventComponent extends Event {
    data = [];
    isInit = false;
    static events = new Map();
    eventsListener = new Map();
    static serialize = "event-component-";
    constructor(type, options) {
        super(EventComponent.serialize + type, options);
    }
    static emitEvent(type, ...data) {
        const event = EventComponent.createEventBase(type, ...data);
        if (event) {
            if (data.length > 0)
                event.data = data;
            event.isInit = true;
            return document.dispatchEvent(event);
        }
        return false;
    }
    static createEventBase(type, ...data) {
        if (type === undefined || type === null || type === "")
            return null;
        let event = EventComponent.events.get(type);
        if (event)
            return event;
        event = new EventComponent(type);
        EventComponent.events.set(type, event);
        event.data = data;
        event.isInit = data.length > 0;
        return event;
    }
    static createEvent(type, ...data) {
        return EventComponent.createEventBase(type, ...data) !== null;
    }
    static addEventListener(component, type, listener, options) {
        const e = EventComponent.createEventBase(type);
        if (e) {
            const eventListener = function (event) {
                listener(...event.data);
            };
            if (e.isInit)
                listener(...e.data);
            const listeners = e.eventsListener.get(component) || [];
            listeners.push(eventListener);
            e.eventsListener.set(component, listeners);
            document.addEventListener(e.type, eventListener, options);
        }
    }
    static removeEventListener(component, type) {
        const e = EventComponent.events.get(type);
        if (e) {
            const listeners = e.eventsListener.get(component);
            if (listeners) {
                for (let event of listeners) {
                    document.removeEventListener(e.type, event);
                }
            }
        }
    }
    static removeEventListeners(component) {
        for (let type of EventComponent.events.keys()) {
            EventComponent.removeEventListener(component, type);
        }
    }
    static deleteEvent(type) {
        const e = EventComponent.events.get(type);
        if (e) {
            for (let component of e.eventsListener.keys()) {
                EventComponent.removeEventListeners(component);
            }
            EventComponent.events.delete(type);
        }
    }
}
exports.EventComponent = EventComponent;
//# sourceMappingURL=Event.js.map