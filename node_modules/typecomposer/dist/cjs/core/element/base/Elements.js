"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FooterElement = exports.FieldSetElement = exports.EmbedElement = exports.DialogElement = exports.DefinitionElement = exports.DetailsElement = exports.DeletedTextElement = exports.DefinitionDescriptionElement = exports.DataListElement = exports.TableColGroupElement = exports.TableColElement = exports.CodeElement = exports.CiteElement = exports.CaptionElement = exports.CanvasElement = exports.VideoElement = exports.BodyElement = exports.BaseElement = exports.BoldElement = exports.AudioElement = exports.SelectElement = exports.LabelElement = exports.TextAreaElement = exports.ButtonElement = exports.InputElement = exports.PreElement = exports.TableCellElement = exports.TableRowElement = exports.TableHeadRowElement = exports.TableFootRowElement = exports.TableElement = exports.TableFootElement = exports.TableHeadCellElement = exports.TableBodyElement = exports.TableHeadElement = exports.BreakElement = exports.EmElement = exports.StrongElement = exports.SpanElement = exports.MainElement = exports.ListItemElement = exports.OrderedListElement = exports.UListElement = exports.ImageElement = exports.AreaElement = exports.AbbreviationElement = exports.AnchorElement = exports.ParagraphElement = exports.DivElement = exports.Component = void 0;
exports.ILayout = exports.SummaryElement = exports.ArticleElement = exports.SectionElement = exports.NavElement = exports.SvgElement = exports.LegendElement = exports.IFrameElement = exports.HtmlElement = exports.HorizontalRuleElement = exports.HeaderElement = exports.HeadElement = exports.H6Element = exports.H5Element = exports.H4Element = exports.H3Element = exports.H2Element = exports.H1Element = exports.FormElement = void 0;
const __1 = require("../..");
const Event_1 = require("./Event");
// 1. `<div>` - Para criar blocos de conteúdo genéricos.
// 2. `<p>` - Para parágrafos de texto.xfHTMLFormElement
// 3. `<a>` - Para links.
// 4. `<img>` - Para exibir imagens.
// 5. `<ul>` - Para listas não ordenadas.
// 6. `<ol>` - Para listas ordenadas.
// 7. `<li>` - Para itens de lista.
// 8. `<h1>`, `<h2>`, `<h3>`, `<h4>`, `<h5>`, `<h6>` - Para cabeçalhos de diferentes níveis.
// 9. `<span>` - Para elementos de texto em linha.
// 10. `<strong>` - Para texto enfatizado.
// 11. `<em>` - Para texto enfatizado (itálico).
// 12. `<br>` - Para quebras de linha.
// 13. `<hr>` - Para criar uma linha horizontal.
// 14. `<table>` - Para criar tabelas.
// 15. `<tr>` - Para linhas de tabela.
// 16. `<th>` - Para células de cabeçalho de tabela. // deprecated
// 17. `<td>` - Para células de dados de tabela.
// 18. `<form>` - Para criar formulários.
// 19. `<input>` - Para campos de entrada em um formulário.
// 20. `<button>` - Para botões.
// 21. `<textarea>` - Para áreas de texto.
// 22. `<label>` - Para rótulos de campos de formulário.
// 23. `<select>` - Para listas suspensas.
// 24. `<iframe>` - Para incorporar conteúdo externo.
// 25. `<audio>` - Para elementos de áudio.
// 26. `<video>` - Para elementos de vídeo.
// 27. `<canvas>` - Para desenho e gráficos em HTML5.
// 28. `<svg>` - Para gráficos vetoriais escaláveis em HTML5.
// 29. `<footer>`, `<header>`, `<nav>`, `<main>`, `<section>`, `<article>` - Elementos semânticos de HTML5 para estruturação de página.
// 30. `<details>` e `<summary>` - Elementos de HTML5 para criar conteúdo expansível.
class Component extends HTMLElement {
    //
    constructor(optional) {
        super();
        if (optional != undefined)
            this.setStyle(optional);
    }
    static applyData(data, element) {
        if (data != undefined) {
            // if (data.id) {
            //   (element as any).id = data.id;
            // }
            if (data.className != undefined) {
                element.addClasName(data.className);
            }
            this.applyStyleOrAttribute(data, element);
        }
    }
    static applyStyleOrAttribute(data, element) {
        if (data) {
            Object.keys(data).forEach((key) => {
                if (data[key] == undefined)
                    return;
                if (key == "for" && data[key] != undefined)
                    element.setAttribute("for", data[key]);
                else if (key == "className" && data[key] != undefined)
                    element.addClasName(data[key]);
                else if (key == "text" && data[key] != undefined)
                    element.innerHTML = data[key];
                else if (element.style.hasOwnProperty(key))
                    element.style[key] = data[key];
                else if (data[key] != undefined) {
                    try {
                        element[key] = data[key];
                    }
                    catch (__) { }
                }
            });
        }
    }
    static setVariant(element, variant) {
        const vart = variant == undefined ? "default-border" : `${variant}-border`;
        const variants = ["default-border", "outline-border", "underlined-border", "solo-border"];
        variants.forEach((value) => {
            if (element.classList.contains(value))
                element.classList.remove(value);
        });
        element.classList.add(vart == "default-border" ? "outline-border" : vart);
    }
    onEvent(type, listener, options) {
        Event_1.EventComponent.addEventListener(this, type, listener, options);
    }
    createEvent(type, ...data) {
        return Event_1.EventComponent.createEvent(type, ...data);
    }
    removeEvent(type) {
        Event_1.EventComponent.removeEventListener(this, type);
    }
    /**
     * Remove all events from the component
     **/
    removeEvents() {
        Event_1.EventComponent.removeEventListeners(this);
    }
    emitEvent(type, ...params) {
        return Event_1.EventComponent.emitEvent(type, ...params);
    }
    deleteEvent(type) {
        Event_1.EventComponent.deleteEvent(type);
    }
}
exports.Component = Component;
customElements.define("component-element", Component);
class DivElement extends HTMLDivElement {
    constructor(optional) {
        super();
        Component.applyData(optional, this);
    }
}
exports.DivElement = DivElement;
customElements.define("base-div-element", DivElement, { extends: "div" });
class ParagraphElement extends HTMLParagraphElement {
    constructor(optional) {
        super();
        Component.applyData(optional, this);
    }
}
exports.ParagraphElement = ParagraphElement;
customElements.define("base-p-element", ParagraphElement, { extends: "p" });
class AnchorElement extends HTMLAnchorElement {
    _rlink = "";
    constructor(optional) {
        super();
        Component.applyData(optional, this);
        this.addEventListener("click", (event) => {
            event.preventDefault();
            if (this._rlink != "") {
                __1.Router.go(this._rlink);
            }
        });
        this.addEventListener("href", (event) => {
            if (this._rlink != "") {
                event.preventDefault();
                __1.Router.go(this._rlink);
            }
        });
    }
    set rlink(link) {
        this.href = link;
        this._rlink = link;
    }
    get rlink() {
        return this._rlink;
    }
}
exports.AnchorElement = AnchorElement;
customElements.define("base-a-element", AnchorElement, { extends: "a" });
class AbbreviationElement extends HTMLElement {
    constructor(optional) {
        super();
        Component.applyData(optional, this);
    }
}
exports.AbbreviationElement = AbbreviationElement;
customElements.define("base-abbr-element", AbbreviationElement, {
    extends: "abbr",
});
// area
class AreaElement extends HTMLAreaElement {
    constructor(optional) {
        super();
        Component.applyData(optional, this);
    }
}
exports.AreaElement = AreaElement;
customElements.define("base-area-element", AreaElement, { extends: "area" });
class ImageElement extends HTMLImageElement {
    constructor(optional) {
        super();
        this.className = "image-element";
        Component.applyData(optional, this);
        if (optional?.src != undefined)
            this.src = optional.src;
    }
}
exports.ImageElement = ImageElement;
customElements.define("base-img-element", ImageElement, { extends: "img" });
class UListElement extends HTMLUListElement {
    constructor(optional) {
        super();
        Component.applyData(optional, this);
    }
}
exports.UListElement = UListElement;
customElements.define("base-ul-element", UListElement, { extends: "ul" });
class OrderedListElement extends HTMLOListElement {
    constructor(optional) {
        super();
        Component.applyData(optional, this);
    }
}
exports.OrderedListElement = OrderedListElement;
customElements.define("base-ol-element", OrderedListElement, { extends: "ol" });
class ListItemElement extends HTMLLIElement {
    constructor(optional) {
        super();
        Component.applyData(optional, this);
    }
    onSelect() { }
}
exports.ListItemElement = ListItemElement;
customElements.define("base-li-element", ListItemElement, { extends: "li" });
class MainElement extends HTMLElement {
    constructor(optional) {
        super();
        Component.applyData(optional, this);
    }
}
exports.MainElement = MainElement;
customElements.define("base-main-element", MainElement, { extends: "main" });
// export interface DataHeadingElement extends StyleOptional {
//   text?: string | ref<string>;
//   for?: string;
// }
class SpanElement extends HTMLSpanElement {
    constructor(optional) {
        super();
        Component.applyData(optional, this);
    }
}
exports.SpanElement = SpanElement;
customElements.define("base-span-element", SpanElement, { extends: "span" });
class StrongElement extends HTMLSpanElement {
    constructor(optional) {
        super();
        Component.applyData(optional, this);
    }
}
exports.StrongElement = StrongElement;
customElements.define("base-strong-element", StrongElement, {
    extends: "strong",
});
class EmElement extends HTMLEmbedElement {
    constructor(optional) {
        super();
        Component.applyData(optional, this);
    }
}
exports.EmElement = EmElement;
customElements.define("base-em-element", EmElement, { extends: "em" });
class BreakElement extends HTMLBRElement {
    constructor(optional) {
        super();
        Component.applyData(optional, this);
    }
}
exports.BreakElement = BreakElement;
customElements.define("base-br-element", BreakElement, { extends: "br" });
class TableHeadElement extends HTMLTableSectionElement {
    constructor(optional) {
        super();
        Component.applyData(optional, this);
    }
}
exports.TableHeadElement = TableHeadElement;
customElements.define("base-thead-element", TableHeadElement, { extends: "thead" });
class TableBodyElement extends HTMLTableSectionElement {
    constructor(optional) {
        super();
        Component.applyData(optional, this);
    }
}
exports.TableBodyElement = TableBodyElement;
customElements.define("base-tbody-element", TableBodyElement, { extends: "tbody" });
class TableHeadCellElement extends HTMLTableCellElement {
    constructor(optional) {
        super();
        if (optional?.colspan)
            this.colSpan = optional.colspan;
        if (optional?.rowspan)
            this.rowSpan = optional.rowspan;
        if (optional?.child)
            this.appendChild(optional.child);
        delete optional?.child;
        Component.applyData(optional, this);
    }
}
exports.TableHeadCellElement = TableHeadCellElement;
customElements.define("base-th-cell-element", TableHeadCellElement, { extends: "th" });
class TableFootElement extends HTMLTableSectionElement {
    constructor(optional) {
        super();
        Component.applyData(optional, this);
    }
}
exports.TableFootElement = TableFootElement;
customElements.define("base-tfoot-element", TableFootElement, { extends: "tfoot" });
class TableElement extends HTMLTableElement {
    _head = undefined;
    _body = undefined;
    _foot = undefined;
    constructor(optional) {
        super();
        Component.applyData(optional, this);
    }
    addHeadRows(...rows) {
        if (this._head == undefined)
            this._head = this.appendChild(new TableHeadElement());
        rows.forEach((row) => {
            this._head.appendChild(row);
        });
    }
    addHeadRow(row) {
        this.addHeadRows(row);
        return row;
    }
    removeHeadRow(row) {
        if (this._head == undefined)
            return;
        if (typeof row == "number")
            this._head.removeChild(this._head.children[row]);
        else
            this._head.removeChild(row);
    }
    removeHeadRows() {
        if (this._head == undefined)
            return;
        this._head.innerHTML = "";
    }
    addFootRows(...rows) {
        if (this._foot == undefined)
            this._foot = this.appendChild(new TableFootElement());
        rows.forEach((row) => {
            this._foot.appendChild(row);
        });
    }
    addFootRow(row) {
        this.addFootRows(row);
        return row;
    }
    removeFootRow(row) {
        if (this._foot == undefined)
            return;
        if (typeof row == "number")
            this._foot.removeChild(this._foot.children[row]);
        else
            this._foot.removeChild(row);
    }
    removeFootRows() {
        if (this._foot == undefined)
            return;
        this._foot.innerHTML = "";
    }
    addRows(...rows) {
        if (this._body == undefined)
            this._body = this.appendChild(new TableBodyElement());
        rows.forEach((row) => {
            this._body.appendChild(row);
        });
    }
    addRow(row) {
        this.addRows(row);
        return row;
    }
    removeRow(row) {
        if (this._body == undefined)
            return;
        if (typeof row == "number")
            this._body.removeChild(this._body.children[row]);
        else
            this._body.removeChild(row);
    }
    removeRows() {
        if (this._body == undefined)
            return;
        this._body.innerHTML = "";
    }
}
exports.TableElement = TableElement;
customElements.define("base-table-element", TableElement, { extends: "table" });
class TableFootRowElement extends HTMLTableRowElement {
    constructor(optional) {
        super();
        if (optional?.cells) {
            this.addCells(...optional.cells);
        }
        delete optional?.cells;
        Component.applyData(optional, this);
    }
    addCells(...cells) {
        cells.forEach((cell) => {
            this.appendChild(cell);
        });
    }
    addCell(cell) {
        this.appendChild(cell);
        return cell;
    }
}
exports.TableFootRowElement = TableFootRowElement;
customElements.define("base-tfoot-row-element", TableFootRowElement, { extends: "tr" });
class TableHeadRowElement extends HTMLTableRowElement {
    constructor(optional) {
        super();
        if (optional?.cells) {
            this.addCells(...optional.cells);
        }
        delete optional?.cells;
        Component.applyData(optional, this);
    }
    addCells(...cells) {
        cells.forEach((cell) => {
            this.appendChild(cell);
        });
    }
    addCell(cell) {
        this.appendChild(cell);
        return cell;
    }
}
exports.TableHeadRowElement = TableHeadRowElement;
customElements.define("base-th-row-element", TableHeadRowElement, { extends: "tr" });
class TableRowElement extends HTMLTableRowElement {
    constructor(optional) {
        super();
        if (optional?.cells) {
            this.addCells(...optional.cells);
        }
        delete optional?.cells;
        Component.applyData(optional, this);
    }
    addCells(...cells) {
        cells.forEach((cell) => {
            this.appendChild(cell);
        });
    }
    addCell(cell) {
        this.appendChild(cell);
        return cell;
    }
}
exports.TableRowElement = TableRowElement;
customElements.define("base-tr-element", TableRowElement, { extends: "tr" });
class TableCellElement extends HTMLTableCellElement {
    constructor(optional) {
        super();
        if (optional?.colspan)
            this.colSpan = optional.colspan;
        if (optional?.rowspan)
            this.rowSpan = optional.rowspan;
        if (optional?.child)
            this.appendChild(optional.child);
        delete optional?.child;
        Component.applyData(optional, this);
    }
}
exports.TableCellElement = TableCellElement;
customElements.define("base-td-element", TableCellElement, { extends: "td" });
class PreElement extends HTMLPreElement {
    constructor(optional) {
        super();
        Component.applyData(optional, this);
    }
}
exports.PreElement = PreElement;
customElements.define("base-pre-element", PreElement, { extends: "pre" });
class InputElement extends HTMLInputElement {
    constructor(optional) {
        super();
        const v = optional?.value;
        delete optional?.value;
        Component.applyData(optional, this);
        if (v) {
            if (typeof v == "string")
                this.value = v;
            else {
                const ref = v;
                ref.subscriber(this, "value", ref["refPropertyKey"]);
                this.addEventListener("input", (event) => {
                    ref.setValue(this.value, ref["refPropertyKey"]);
                });
            }
        }
    }
}
exports.InputElement = InputElement;
customElements.define("base-input-element", InputElement, { extends: "input" });
class ButtonElement extends HTMLButtonElement {
    constructor(optional) {
        super();
        const type = optional?.type;
        delete optional?.type;
        Component.applyData(optional, this);
        if (type)
            this.type = type;
        if (optional?.accept)
            this.accept = optional.accept;
        if (optional?.multiple)
            this.multiple = optional.multiple;
    }
    // @ts-ignore
    set type(value) {
        // @ts-ignore
        super.type = value;
    }
}
exports.ButtonElement = ButtonElement;
customElements.define("base-button-element", ButtonElement, {
    extends: "button",
});
class TextAreaElement extends HTMLTextAreaElement {
    constructor(optional) {
        super();
        Component.applyData(optional, this);
    }
}
exports.TextAreaElement = TextAreaElement;
customElements.define("base-textarea-element", TextAreaElement, {
    extends: "textarea",
});
class LabelElement extends HTMLLabelElement {
    constructor(optional) {
        super();
        Component.applyData(optional, this);
    }
}
exports.LabelElement = LabelElement;
customElements.define("base-label-element", LabelElement, { extends: "label" });
class SelectElement extends HTMLSelectElement {
    constructor(optional) {
        super();
        Component.applyData(optional, this);
    }
}
exports.SelectElement = SelectElement;
customElements.define("base-select-element", SelectElement, {
    extends: "select",
});
class AudioElement extends HTMLAudioElement {
    constructor(optional) {
        super();
        Component.applyData(optional, this);
    }
}
exports.AudioElement = AudioElement;
customElements.define("base-audio-element", AudioElement, { extends: "audio" });
class BoldElement extends HTMLElement {
    constructor(optional) {
        super();
        Component.applyData(optional, this);
    }
}
exports.BoldElement = BoldElement;
customElements.define("base-b-element", BoldElement, { extends: "b" });
// <base>
class BaseElement extends HTMLElement {
    constructor(optional) {
        super();
        Component.applyData(optional, this);
    }
}
exports.BaseElement = BaseElement;
customElements.define("base-base-element", BaseElement, { extends: "base" });
// <body>
class BodyElement extends HTMLBodyElement {
    constructor(optional) {
        super();
        Component.applyData(optional, this);
    }
}
exports.BodyElement = BodyElement;
customElements.define("base-body-element", BodyElement, { extends: "body" });
// <video>
class VideoElement extends HTMLVideoElement {
    constructor(optional) {
        super();
        Component.applyData(optional, this);
    }
}
exports.VideoElement = VideoElement;
customElements.define("base-video-element", VideoElement, { extends: "video" });
class CanvasElement extends HTMLCanvasElement {
    constructor(optional) {
        super();
        if (optional?.width)
            this.width = optional.width;
        if (optional?.height)
            this.height = optional.height;
        Component.applyData(optional, this);
    }
}
exports.CanvasElement = CanvasElement;
customElements.define("base-canvas-element", CanvasElement, {
    extends: "canvas",
});
// <caption>
class CaptionElement extends HTMLTableCaptionElement {
    constructor(optional) {
        super();
        Component.applyData(optional, this);
    }
}
exports.CaptionElement = CaptionElement;
customElements.define("base-caption-element", CaptionElement, {
    extends: "caption",
});
// <cite>
class CiteElement extends HTMLElement {
    constructor(optional) {
        super();
        Component.applyData(optional, this);
    }
}
exports.CiteElement = CiteElement;
customElements.define("base-cite-element", CiteElement, { extends: "cite" });
// <code>
class CodeElement extends HTMLElement {
    constructor(optional) {
        super();
        Component.applyData(optional, this);
        if (optional.contentEditable != undefined)
            this.contentEditable = optional.contentEditable.toString();
    }
}
exports.CodeElement = CodeElement;
customElements.define("base-code-element", CodeElement, { extends: "code" });
// <col>
class TableColElement extends HTMLTableColElement {
    constructor(optional) {
        super();
        if (optional?.span)
            this.span = optional.span;
        Component.applyData(optional, this);
    }
}
exports.TableColElement = TableColElement;
customElements.define("base-col-element", TableColElement, { extends: "col" });
// <colgroup>
class TableColGroupElement extends HTMLTableColElement {
    constructor(optional) {
        super();
        if (optional?.span)
            this.span = optional.span;
        Component.applyData(optional, this);
    }
}
exports.TableColGroupElement = TableColGroupElement;
customElements.define("base-colgroup-element", TableColGroupElement, {
    extends: "colgroup",
});
// <datalist>
class DataListElement extends HTMLDataListElement {
    constructor(optional) {
        super();
        Component.applyData(optional, this);
    }
}
exports.DataListElement = DataListElement;
customElements.define("base-datalist-element", DataListElement, {
    extends: "datalist",
});
// <dd>
class DefinitionDescriptionElement extends HTMLElement {
    constructor(optional) {
        super();
        Component.applyData(optional, this);
    }
}
exports.DefinitionDescriptionElement = DefinitionDescriptionElement;
customElements.define("base-dd-element", DefinitionDescriptionElement, {
    extends: "dd",
});
// <del>
class DeletedTextElement extends HTMLModElement {
    constructor(optional) {
        super();
        if (optional?.cite)
            this.cite = optional.cite;
        Component.applyData(optional, this);
    }
}
exports.DeletedTextElement = DeletedTextElement;
customElements.define("base-del-element", DeletedTextElement, {
    extends: "del",
});
// <details>
class DetailsElement extends HTMLDetailsElement {
    constructor(optional) {
        super();
        Component.applyData(optional, this);
        if (optional?.open)
            this.open = optional.open;
        if (optional?.summary) {
            if (typeof optional.summary == "string") {
                // @ts-ignore
                this.setSummary(new SummaryElement({ text: optional.summary }));
            }
            else {
                this.setSummary(optional.summary);
            }
        }
    }
    setSummary(summary) {
        this.querySelector("summary")?.remove();
        this.appendChild(summary);
    }
}
exports.DetailsElement = DetailsElement;
customElements.define("base-details-element", DetailsElement, {
    extends: "details",
});
// <dfn>
class DefinitionElement extends HTMLElement {
    constructor(optional) {
        super();
        Component.applyData(optional, this);
    }
}
exports.DefinitionElement = DefinitionElement;
customElements.define("base-dfn-element", DefinitionElement, {
    extends: "dfn",
});
// <dialog>
class DialogElement extends HTMLDialogElement {
    constructor(optional) {
        super();
        Component.applyData(optional, this);
        this.open = optional.open == undefined ? true : optional.open;
    }
}
exports.DialogElement = DialogElement;
customElements.define("base-dialog-element", DialogElement, {
    extends: "dialog",
});
// <embed>
class EmbedElement extends HTMLEmbedElement {
    constructor(optional) {
        super();
        if (optional?.height)
            this.height = optional.height;
        if (optional?.src)
            this.src = optional.src;
        if (optional?.type)
            this.type = optional.type;
        if (optional?.width)
            this.width = optional.width;
        Component.applyData(optional, this);
    }
}
exports.EmbedElement = EmbedElement;
customElements.define("base-embed-element", EmbedElement, { extends: "embed" });
//  <fieldset>
class FieldSetElement extends HTMLFieldSetElement {
    constructor(optional) {
        super();
        Component.applyData(optional, this);
        if (optional?.disabled)
            this.disabled = optional.disabled;
        if (optional?.name)
            this.name = optional.name;
        if (optional?.legend) {
            if (typeof optional.legend == "string") {
                // @ts-ignore
                this.setLegend(new LegendElement({ text: optional.legend }));
            }
            else {
                this.setLegend(optional.legend);
            }
        }
    }
    setLegend(legend) {
        this.querySelector("legend")?.remove();
        this.appendChild(legend);
    }
}
exports.FieldSetElement = FieldSetElement;
customElements.define("base-fieldset-element", FieldSetElement, {
    extends: "fieldset",
});
// <footer>
class FooterElement extends HTMLElement {
    constructor(optional) {
        super();
        Component.applyData(optional, this);
    }
}
exports.FooterElement = FooterElement;
customElements.define("base-footer-element", FooterElement, {
    extends: "footer",
});
class FormElement extends HTMLFormElement {
    _response = undefined;
    constructor(optional) {
        super();
        Component.applyData(optional, this);
        //this.setAttribute("is-send", "false");
    }
}
exports.FormElement = FormElement;
customElements.define("base-form-element", FormElement, { extends: "form" });
class H1Element extends HTMLHeadingElement {
    constructor(optional) {
        super();
        Component.applyData(optional, this);
        if (optional?.text)
            this.innerText = optional.text.toString();
    }
}
exports.H1Element = H1Element;
customElements.define("base-h1-element", H1Element, { extends: "h1" });
class H2Element extends HTMLHeadingElement {
    constructor(optional) {
        super();
        Component.applyData(optional, this);
        if (optional?.text)
            this.innerText = optional.text.toString();
    }
}
exports.H2Element = H2Element;
customElements.define("base-h2-element", H2Element, { extends: "h2" });
class H3Element extends HTMLHeadingElement {
    constructor(optional) {
        super();
        Component.applyData(optional, this);
        if (optional?.text)
            this.text = optional.text;
    }
    get text() {
        return this.innerText;
    }
    set text(value) {
        if (typeof value !== "string")
            this["_styleref"].appendStyleref("text", this, value);
        else
            this.innerText = value;
    }
}
exports.H3Element = H3Element;
customElements.define("base-h3-element", H3Element, { extends: "h3" });
class H4Element extends H3Element {
    constructor(optional) {
        super();
        Component.applyData(optional, this);
        if (optional?.text)
            this.innerText = optional.text.toString();
    }
    onInit() { }
    addClasName(...names) {
        this.classList.add(...names);
    }
}
exports.H4Element = H4Element;
customElements.define("base-h4-element", H4Element, { extends: "h4" });
class H5Element extends H3Element {
    constructor(optional) {
        super();
        Component.applyData(optional, this);
        if (optional?.text)
            this.innerText = optional.text.toString();
    }
    onInit() { }
    addClasName(...names) {
        this.classList.add(...names);
    }
}
exports.H5Element = H5Element;
customElements.define("base-h5-element", H5Element, { extends: "h5" });
class H6Element extends H3Element {
    constructor(optional) {
        super();
        Component.applyData(optional, this);
        if (optional?.text)
            this.innerText = optional.text.toString();
    }
    onInit() { }
    addClasName(...names) {
        this.classList.add(...names);
    }
}
exports.H6Element = H6Element;
customElements.define("base-h6-element", H6Element, { extends: "h6" });
// <head>
class HeadElement extends HTMLHeadElement {
    constructor(optional) {
        super();
        Component.applyData(optional, this);
    }
}
exports.HeadElement = HeadElement;
customElements.define("base-head-element", HeadElement, { extends: "head" });
// <header>
class HeaderElement extends HTMLElement {
    constructor(optional) {
        super();
        Component.applyData(optional, this);
    }
}
exports.HeaderElement = HeaderElement;
customElements.define("base-header-element", HeaderElement, {
    extends: "header",
});
// <hr>
class HorizontalRuleElement extends HTMLHRElement {
    constructor(optional) {
        super();
        Component.applyData(optional, this);
    }
}
exports.HorizontalRuleElement = HorizontalRuleElement;
customElements.define("base-hr-element", HorizontalRuleElement, {
    extends: "hr",
});
// <html>
class HtmlElement extends HTMLHtmlElement {
    constructor(optional) {
        super();
        if (optional?.manifest)
            this.manifest = optional.manifest;
        Component.applyData(optional, this);
    }
    set manifest(value) {
        this.setAttribute("manifest", value);
    }
    get manifest() {
        return this.getAttribute("manifest");
    }
}
exports.HtmlElement = HtmlElement;
customElements.define("base-html-element", HtmlElement, { extends: "html" });
// <iframe>
class IFrameElement extends HTMLIFrameElement {
    constructor(optional) {
        super();
        if (optional?.allow)
            this.allow = optional.allow;
        if (optional?.allowfullscreen)
            this.allowfullscreen = optional.allowfullscreen;
        if (optional?.allowpaymentrequest)
            this.allowpaymentrequest = optional.allowpaymentrequest;
        if (optional?.csp)
            this.csp = optional.csp;
        if (optional?.height)
            this.height = optional.height;
        if (optional?.importance)
            this.importance = optional.importance;
        if (optional?.loading)
            this.loading = optional.loading;
        if (optional?.name)
            this.name = optional.name;
        if (optional?.referrerpolicy)
            this.referrerpolicy = optional.referrerpolicy;
        if (optional?.src)
            this.src = optional.src;
        if (optional?.srcdoc)
            this.srcdoc = optional.srcdoc;
        if (optional?.width)
            this.width = optional.width;
        Component.applyData(optional, this);
    }
    set allowfullscreen(value) {
        this.setAttribute("allowfullscreen", value.toString());
    }
    get allowfullscreen() {
        return this.getAttribute("allowfullscreen") == "true";
    }
    set allowpaymentrequest(value) {
        this.setAttribute("allowpaymentrequest", value.toString());
    }
    get allowpaymentrequest() {
        return this.getAttribute("allowpaymentrequest") == "true";
    }
    set csp(value) {
        this.setAttribute("csp", value);
    }
    get csp() {
        return this.getAttribute("csp");
    }
    set importance(value) {
        this.setAttribute("importance", value);
    }
    get importance() {
        return this.getAttribute("importance");
    }
    set referrerpolicy(value) {
        this.setAttribute("referrerpolicy", value);
    }
    get referrerpolicy() {
        return this.getAttribute("referrerpolicy");
    }
}
exports.IFrameElement = IFrameElement;
customElements.define("base-iframe-element", IFrameElement, {
    extends: "iframe",
});
// <legend>
class LegendElement extends HTMLLegendElement {
    constructor(optional) {
        super();
        Component.applyData(optional, this);
        if (optional?.value)
            this.innerHTML = optional.value;
    }
}
exports.LegendElement = LegendElement;
customElements.define("base-legend-element", LegendElement, {
    extends: "legend",
});
class SvgElement extends HTMLObjectElement {
    constructor(optional) {
        super();
        Component.applyData(optional, this);
        if (optional?.width)
            this.width = optional.width;
        if (optional?.height)
            this.height = optional.height;
        this.setAttribute("type", "image/svg+xml");
    }
    set color(value) {
        const pathElement = this.contentDocument?.querySelector("path");
        if (pathElement)
            pathElement.style.fill = value;
        else {
            this.onload = () => {
                const pathElement = this.contentDocument?.querySelector("path");
                if (pathElement)
                    pathElement.style.fill = value;
            };
            var circleElements = this.contentDocument.querySelectorAll("circle");
            // Alterar a cor de todos os elementos de círculo dentro do SVG
            circleElements.forEach(function (circle) {
                circle.style.fill = value; // Alterar para a cor vermelha
            });
        }
    }
    get color() {
        const pathElement = this.contentDocument?.querySelector("path");
        if (pathElement)
            return pathElement.style.fill.toString();
        return "";
    }
}
exports.SvgElement = SvgElement;
customElements.define("base-svg-element", SvgElement, { extends: "object" });
class NavElement extends HTMLElement {
    constructor(optional) {
        super();
        Component.applyData(optional, this);
    }
}
exports.NavElement = NavElement;
customElements.define("base-nav-element", NavElement, { extends: "nav" });
class SectionElement extends HTMLElement {
    constructor(optional) {
        super();
        Component.applyData(optional, this);
    }
}
exports.SectionElement = SectionElement;
customElements.define("base-section-element", SectionElement, {
    extends: "section",
});
class ArticleElement extends HTMLElement {
    constructor(optional) {
        super();
        Component.applyData(optional, this);
    }
}
exports.ArticleElement = ArticleElement;
customElements.define("base-article-element", ArticleElement, {
    extends: "article",
});
class SummaryElement extends HTMLElement {
    constructor(optional) {
        super();
        Component.applyData(optional, this);
    }
}
exports.SummaryElement = SummaryElement;
customElements.define("base-summary-element", SummaryElement, {
    extends: "summary",
});
class ILayout extends Component {
    constructor(optional) {
        super(optional);
    }
}
exports.ILayout = ILayout;
customElements.define("base-layout-element", ILayout);
//# sourceMappingURL=Elements.js.map