"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DropDown = exports.DropDownItem = void 0;
const __1 = require("../..");
class DropDownItem extends __1.DivElement {
}
exports.DropDownItem = DropDownItem;
// @ts-ignore
customElements.define("drop-down-item", DropDownItem, { extends: "div" });
class DropDown extends __1.Component {
    props;
    onSelectionAction = this.closeAndClean.bind(this);
    _selectionType;
    previousSelected = [];
    _input;
    _inputAndButtonDiv;
    _options = [];
    _dropdownContent;
    _idClass;
    onChange = () => { };
    _selected = undefined;
    textValue = undefined;
    textSelected = undefined;
    constructor(props) {
        super(props);
        this.props = props;
        this.inputAndButtonDiv = new __1.DivElement({
            className: "input-and-button-div",
        });
        this.dropdownContent = new __1.DivElement({ className: "dropdown-content" });
        this.append(this.inputAndButtonDiv, this.dropdownContent);
        this._input = new __1.InputElement({ className: "input" });
        this.input.readOnly = true;
        this.input.value = props.placeholder ? props.placeholder : props.defaultOption || "";
        this.selectionType = props.selectionType || "closeAndClean";
        this.onInit();
        if (props.textValue)
            this.textValue = props.textValue;
        if (props.textSelected)
            this.textSelected = props.textSelected;
        if (props.textSelected == undefined && props.textValue != undefined)
            this.textSelected = props.textValue;
        this.options = props.options == undefined || props.options.length === 0 ? [props.noContent] : props.options;
    }
    onInit() {
        this.className = "dropdown";
        const arrow = new __1.DivElement({ className: "arrow-down" });
        this.inputAndButtonDiv.append(this.input, arrow);
        this.inputAndButtonDiv.onclick = () => {
            if (this.options.length === 0)
                return;
            this.inputAndButtonDiv.classList.toggle("pressed");
            arrow.classList.toggle("up");
        };
        this.handleClickOutside = this.handleClickOutside.bind(this);
        document.addEventListener("mousedown", this.handleClickOutside);
    }
    handleClickOutside(event) {
        if (!this.inputAndButtonDiv.contains(event.target) && !this.dropdownContent.contains(event.target) && this.inputAndButtonDiv.classList.contains("pressed")) {
            this.inputAndButtonDiv.children[1].classList.toggle("pressed");
            this.inputAndButtonDiv.classList.toggle("pressed");
            this.inputAndButtonDiv.children[1].classList.toggle("up");
        }
    }
    get selected() {
        return this._selected;
    }
    set selected(value) {
        this._selected = value;
        this.input.value = this.textValue(value);
    }
    closeAndClean() {
        Array.from(this.dropdownContent.children).forEach((child) => {
            child.classList.remove("selected");
        });
        this.inputAndButtonDiv.children[1].classList.toggle("pressed");
        this.inputAndButtonDiv.classList.toggle("pressed");
        this.inputAndButtonDiv.children[1].classList.toggle("up");
    }
    closeAndKeep() {
        this.inputAndButtonDiv.children[1].classList.toggle("pressed");
        this.inputAndButtonDiv.classList.toggle("pressed");
        this.inputAndButtonDiv.children[1].classList.toggle("up");
    }
    openAndClean() {
        Array.from(this.dropdownContent.children).forEach((child) => {
            child.classList.remove("selected");
        });
    }
    get selectionType() {
        return this._selectionType;
    }
    set selectionType(selectionType) {
        if (selectionType == "closeAndKeep")
            this.onSelectionAction = this.closeAndKeep.bind(this);
        else if (selectionType == "openAndClean")
            this.onSelectionAction = this.openAndClean.bind(this);
        else if (selectionType == "openAndKeep")
            this.onSelectionAction = () => { };
        else
            this.onSelectionAction = this.closeAndClean.bind(this);
        this._selectionType = selectionType;
    }
    get input() {
        return this._input;
    }
    get options() {
        return this._options;
    }
    set options(options) {
        this._options = options;
        if (!this.dropdownContent)
            return;
        this.dropdownContent.innerHTML = "";
        this.options.forEach((option, index) => {
            let node;
            if (option instanceof Node)
                node = this.dropdownContent.appendChild(option);
            else {
                const div = new DropDownItem({
                    text: this.textValue ? this.textValue(option) : option?.toString() || "",
                });
                node = div;
                if (this.previousSelected.includes(option)) {
                    div.classList.toggle("selected");
                }
                this.dropdownContent.append(div);
            }
            node.classList.add("option");
            node.onclick = () => {
                this.onSelectionAction();
                node.classList.toggle("selected");
                if (node.classList.contains("selected")) {
                    this.previousSelected.push(option);
                }
                else {
                    this.previousSelected = this.previousSelected.filter((selectedOption) => selectedOption !== option);
                }
                this.input.value = this.textSelected ? this.textSelected(option) : option?.toString() || "";
                this._selected = option;
                this.input.style.color = "black";
                this.onChange(option, index);
                this.dispatchEvent(new CustomEvent("change", { detail: { item: option, index } }));
            };
        });
    }
    get inputAndButtonDiv() {
        return this._inputAndButtonDiv;
    }
    set inputAndButtonDiv(inputAndButtonDiv) {
        this._inputAndButtonDiv = inputAndButtonDiv;
    }
    get dropdownContent() {
        return this._dropdownContent;
    }
    set dropdownContent(dropdownContent) {
        this._dropdownContent = dropdownContent;
    }
    get idClass() {
        return this._idClass;
    }
    set idClass(idClass) {
        this._idClass = idClass;
    }
}
exports.DropDown = DropDown;
// @ts-ignore
customElements.define("drop-down", DropDown);
//# sourceMappingURL=DropDown.js.map