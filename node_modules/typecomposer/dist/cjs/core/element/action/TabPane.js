"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TabPane = void 0;
const __1 = require("../..");
class TabPane extends __1.BorderPaneElement {
    tabs = new __1.DivElement();
    slectTabItem = null;
    type = "min";
    _closeable = false;
    constructor(optional) {
        super(optional);
        this.addClasName("tab-pane");
        this.style.width = "100%";
        this.style.marginTop = "10px";
        // this.style.minHeight = "280px";
        // this.style.maxHeight = "280px"; ??why
        this.tabs.classList.add("tab-pane-tabs");
        this.top = this.tabs;
        this.center = new __1.DivElement();
        this.center.classList.add("tab-pane-content");
        if (optional != undefined && optional?.type != undefined)
            this.type = optional.type;
        if (optional != undefined && optional?.closeable != undefined)
            this._closeable = optional.closeable;
        if (optional != undefined && optional?.alignTab != undefined)
            this.tabs.style.justifyContent = optional.alignTab;
    }
    addTap(title, content, icon = null) {
        this.addTaps(new __1.TabItem(title, content, icon, this.closeable));
    }
    addTaps(...tabs) {
        tabs.forEach((tab) => {
            this.center.appendChild(tab.content);
            this.tabs.appendChild(tab);
            tab.addEventListener("click", () => this.setTabSelected(tab));
            // if (this.type == "max")
            //     this.tabs.style.gridTemplateColumns = "repeat(" + this.tabs.children.length + ", 1fr)";
            // else {
            //     this.tabs.style.gridTemplateColumns = "repeat(" + this.tabs.children.length + ", auto)";
            //     tab.style.width = "fit-content";
            //     this.tabs.style.width = "fit-content";
            // }
            if (this.tabs.children.length == 1)
                this.setTabSelected(tab);
        });
    }
    removeTap(title) {
        for (let i = 0; i < this.tabs.children.length; i++) {
            const child = this.tabs.children.item(i);
            if (child instanceof HTMLElement && child.innerHTML == title) {
                this.tabs.removeChild(child);
                break;
            }
        }
    }
    get closeable() {
        return this._closeable;
    }
    set closeable(value) {
        this._closeable = value;
        for (let i = 0; i < this.tabs?.children.length; i++) {
            const child = this.tabs.children.item(i);
            if (child instanceof __1.TabItem)
                child.closeable = value;
        }
    }
    setTabSelected(item) {
        if (this.slectTabItem)
            this.slectTabItem.unselect();
        if (item) {
            item.select();
            this.slectTabItem = item;
            this.onSelectTab(item.title, item.content, Array.from(this.tabs.children).indexOf(item));
        }
    }
    getTabs() {
        return Array.from(this.tabs.children);
    }
    getTab(index) {
        return this.tabs.children.item(index);
    }
    get select() {
        return this.slectTabItem;
    }
    get pane() {
        return this.tabs;
    }
    onSelectTab = () => { };
}
exports.TabPane = TabPane;
customElements.define("tab-pane", TabPane);
//# sourceMappingURL=TabPane.js.map