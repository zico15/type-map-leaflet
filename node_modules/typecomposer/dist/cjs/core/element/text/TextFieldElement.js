"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextFieldElement = void 0;
const __1 = require("../..");
const __2 = require("../../");
class TextFieldElement extends __1.Component {
    _input;
    _label = undefined;
    _icon = undefined;
    iconPane = new __1.DivElement({ className: "icon" });
    constructor(optional) {
        super();
        this._input = new __1.InputElement({
            type: optional?.type || "text",
            height: "auto",
            width: "100%",
            placeholder: " ",
            value: optional?.value || optional?.text || "",
        });
        this.appendChild(this.input);
        if (optional?.placeholderAnimation == true || optional?.placeholderAnimation == undefined) {
            this._label = new __1.LabelElement({ text: optional?.placeholder || " " });
            this._label.addEventListener("click", () => this.input.focus());
            this.appendChild(this.label);
        }
        else
            this.input.placeholder = optional?.placeholder || " ";
        this.appendChild(this.iconPane);
        this.iconPane.addEventListener("click", () => this.input.focus());
        // @ts-ignore
        __1.Component.setVariant(this.input, optional?.variant);
        if (optional?.icon != undefined)
            this.icon = optional.icon;
        delete optional?.value;
        delete optional?.text;
        __1.Component.applyData(optional, this);
    }
    get input() {
        return this._input;
    }
    get label() {
        return this._label;
    }
    get icon() {
        return this._icon;
    }
    set icon(value) {
        if (this._icon != undefined)
            this.iconPane.removeChild(this._icon);
        this._icon = value;
        this.iconPane.append(value);
        if (value.style.order == "" || value.style.order == "0") {
            if (this.label != undefined)
                this.label.style.marginLeft = this.iconPane.offsetWidth + 30 + "px";
            this.input.style.paddingLeft = this.iconPane.offsetWidth + 40 + "px";
            this.iconPane.style.left = "1rem";
            this.iconPane.style.justifyContent = "center";
            this.iconPane.style.removeProperty("right");
        }
        else {
            this.iconPane.style.removeProperty("left");
            this.iconPane.style.right = "1rem";
            this.iconPane.style.justifyContent = "end";
        }
    }
    get value() {
        return this.input.value;
    }
    set value(value) {
        if (value == undefined)
            value = "";
        if (typeof value == "string")
            this.input.value = value;
        else if (value instanceof __2.RefString)
            value.subscriber(this, "value", value.refPropertyKey);
        else
            value.subscriber(this, "value");
    }
}
exports.TextFieldElement = TextFieldElement;
// @ts-ignore
customElements.define("text-field-element", TextFieldElement);
//# sourceMappingURL=TextFieldElement.js.map