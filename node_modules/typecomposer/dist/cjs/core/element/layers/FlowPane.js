"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlowPane = void 0;
const __1 = require("../..");
class FlowPane extends __1.ILayout {
    constructor(optional) {
        super({ overflow: "hidden", ...optional });
        this.addClasName("flow-pane");
    }
    appendChild(node, flowType = "flow-6") {
        if (node && !node.classList.contains("flow-pane-item"))
            this.addClassNameInChilds(node, flowType);
        return super.appendChild(node);
    }
    removeChild(child) {
        if (child instanceof HTMLElement)
            this.removeClassNameInChilds(child);
        return super.removeChild(child);
    }
    addClassNameInChilds(element, flowType) {
        element.style.width = "auto";
        element.removeAttribute("height");
        if (!element.classList.contains(flowType))
            element.classList.add(flowType);
        if (!element.classList.contains("flow-12"))
            element.classList.add("flow-12");
    }
    removeClassNameInChilds(element) {
        if (element.classList.contains("flow-pane-item"))
            element.classList.remove("flow-pane-item");
        for (let i = 1; i <= 12; i++) {
            if (element.classList.contains(`flow-${i}`))
                element.classList.remove(`flow-${i}`);
        }
    }
    setFlowType(element, flowType) {
        this.removeClassNameInChilds(element);
        this.addClassNameInChilds(element, flowType);
    }
}
exports.FlowPane = FlowPane;
customElements.define("flow-pane", FlowPane);
//# sourceMappingURL=FlowPane.js.map