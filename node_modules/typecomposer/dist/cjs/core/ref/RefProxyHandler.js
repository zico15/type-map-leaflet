"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createProxyRef = exports.RefString = void 0;
class RefString extends String {
    refPropertyKey;
    refTarget;
    constructor(valor, refPropertyKey, refTarget = undefined) {
        super(valor);
        this.refPropertyKey = refPropertyKey;
        this.refTarget = refTarget;
    }
    setValue(value, propertyKey) {
        if (this.refTarget)
            this.refTarget[propertyKey] = value;
    }
    subscriber(target, propertyKey, refPropertyKey = undefined) {
        if (this.refTarget) {
            this.refTarget.subscriber(target, propertyKey, refPropertyKey);
        }
    }
    onChange(fun, target) {
        if (this.refTarget) {
            this.refTarget.onChange(fun, target);
        }
    }
    toString() {
        return super.toString();
    }
}
exports.RefString = RefString;
function createProxyRef(target, onNotity, onChange) {
    const handler = {};
    const proxy = new Proxy(target, handler);
    let _subscribers = [];
    const registry = new FinalizationRegistry((target) => {
        _subscribers = _subscribers.filter((subscriber) => subscriber.target != target);
    });
    function notify(prop, value) {
        // console.log("notify: ", _subscribers);
        const remove = [];
        _subscribers.forEach((subscriber) => {
            if (!setValueToSubscriber(subscriber, prop, value))
                remove.push(subscriber);
        });
        _subscribers = _subscribers.filter((subscriber) => !remove.includes(subscriber));
    }
    function setValueToSubscriber(subscriber, prop, value) {
        try {
            const target = subscriber.target?.deref();
            if (target) {
                if (value && value instanceof RefString)
                    value = value?.toString() || "";
                // if (subscriber.fun) {
                //     const fun = subscriber.fun?.deref();
                //     if (fun) fun(newTarget.value);
                //     else return false;
                // // } else
                // console.log(
                //     "setValueToSubscriber: ",
                //     prop,
                //     " subscriber.propertyKe: ",
                //     subscriber.propertyKey,
                //     " value: ",
                //     value,
                // );
                // if (prop == subscriber.propertyKey)
                if (subscriber.refPropertyKey == undefined || prop == undefined || prop == subscriber.refPropertyKey)
                    target[subscriber.propertyKey] = value;
            }
            else
                return false;
        }
        catch (error) {
            return false;
        }
        return true;
    }
    // function subscriber(target: {}, propertyKey: string | symbol) {
    //     const item = { target: new WeakRef(target), propertyKey };
    //     if (setValueToSubscriber(item)) {
    //         _subscribers.push(item);
    //         registry.register(item.target, item);
    //     }
    // }
    // function unsubscribe(data: { ref: any; name: string; fun?: Function }) {
    //     // _subscribers = _subscribers.filter(
    //     //   (subscriber) => subscriber != data,
    //     // );
    // }
    const proxyHandler = {
        get: function (target, prop, receiver) {
            const value = Reflect.get(target, prop, receiver);
            if (typeof value === "string")
                return new RefString(value, prop, proxy);
            return value;
        },
        set: function (target, prop, value, receiver) {
            //   console.log("prop: ", prop, " value: ", value, " receiver: ", receiver);
            if (value instanceof RefString)
                value = value?.toString();
            //   console.log("set: ", prop, value);
            const resul = Reflect.set(target, prop, value, receiver);
            notify(prop, value);
            onNotity();
            return resul;
        },
        deleteProperty: function (target, prop) {
            const resul = Reflect.deleteProperty(target, prop);
            onNotity();
            return resul;
        },
    };
    proxy["subscriber"] = function (target, propertyKey, refPropertyKey = undefined, writeOnly = false) {
        if (writeOnly) {
            // Object.defineProperty(proxy, propertyKey, {
            //     get: function () {
            //         return proxy[refPropertyKey];
            //     },
            //     set: function (value) {
            //         proxy["setValue"](value, propertyKey);
            //     },
            // });
        }
        const item = {
            target: new WeakRef(target),
            propertyKey,
            refPropertyKey,
        };
        let value = refPropertyKey == undefined ? proxy["value"] : proxy[refPropertyKey];
        if (value instanceof RefString)
            value = value.toString();
        if (setValueToSubscriber(item, refPropertyKey, value)) {
            _subscribers.push(item);
            registry.register(item.target, item);
        }
    };
    proxy["toString"] = function () {
        return proxy["value"]?.toString() || "";
    };
    proxy["onChange"] = onChange;
    proxy["setValue"] = function (value, propertyKey) {
        if (propertyKey)
            proxy[propertyKey] = value;
        else
            proxy["value"] = value;
    };
    proxy["list"] = _subscribers;
    proxy["refPropertyKey"] = undefined;
    Object.setPrototypeOf(handler, proxyHandler);
    return proxy;
}
exports.createProxyRef = createProxyRef;
//# sourceMappingURL=RefProxyHandler.js.map