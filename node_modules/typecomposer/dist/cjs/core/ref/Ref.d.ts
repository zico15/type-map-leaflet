export type ref<T> = {
    value: T;
    id: string;
    subscriber: (target: {}, propertyKey: string | symbol, refPropertyKey?: string | symbol) => void;
    unsubscribe: (data: {
        ref: any;
        name: string;
        fun?: Function;
    }) => void;
    onChange: (fun: (value: T) => void, target?: {}) => void;
    toString: () => string;
    setValue: (value: any, propertyKey?: string | symbol) => void;
};
export declare function ref<T>(target: T): {
    value: T;
    id: string;
    subscriber: (target: {}, propertyKey: string | symbol) => void;
    unsubscribe: (data: {
        ref: any;
        name: string;
        fun?: Function;
    }) => void;
    onChange: (fun: (value: T) => void, target?: {}) => void;
    toString: () => string;
    setValue: (value: any, propertyKey?: string | symbol) => void;
};
